set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath

" ====================================== LOAD FUNCTIONS ======================================
source ~/.config/vim/functions.vim

function! CreateSplitMappings(mode, mapping, rhs) abort
    execute a:mode.'map '.a:mapping.' '.a:rhs
    execute a:mode.'map '.a:mapping.a:mapping[-1:].' '.a:rhs
    execute a:mode.'map '.a:mapping.'h :call VSCodeNotify("workbench.action.newGroupLeft")<CR>'.a:rhs
    execute a:mode.'map '.a:mapping.'l :call VSCodeNotify("workbench.action.newGroupRight")<CR>'.a:rhs
    execute a:mode.'map '.a:mapping.'j :call VSCodeNotify("workbench.action.newGroupBelow")<CR>'.a:rhs
    execute a:mode.'map '.a:mapping.'k :call VSCodeNotify("workbench.action.newGroupAbove")<CR>'.a:rhs
endfunction

" ====================================== SET PLUGINS ======================================
if !exists("plugins")
    let plugins = [
        \ ['yogeshdhamija/better-asterisk-remap.vim', {}],
        \ ['tpope/vim-repeat', {}],
        \ ['tpope/vim-surround', {}],
        \ ['michaeljsmith/vim-indent-object', {}],
        \ ['junegunn/vim-easy-align', {}],
        \ ['yogeshdhamija/find-in-dir-helper.vim', {}],
        \ ['yogeshdhamija/close-hidden-buffers-command.vim', {}],
        \ ['machakann/vim-highlightedyank', {}],
    \ ]
endif

" ====================================== LOAD VIMRC ======================================
source ~/.vimrc

" ====================================== CHANGE SETTINGS ======================================
set showmode

" ==================================== VSCODE-NEOVIM SPECIFICS ====================================
" Cannot open directory listing in current "buffer" in VSCode
    unmap \dd
    unmap \d

" Get folding working with vscode neovim plugin
    nnoremap zM :call VSCodeNotify('editor.foldAll')<CR>
    nnoremap zR :call VSCodeNotify('editor.unfoldAll')<CR>
    nnoremap zc :call VSCodeNotify('editor.fold')<CR>
    nnoremap zC :call VSCodeNotify('editor.foldRecursively')<CR>
    nnoremap zo :call VSCodeNotify('editor.unfold')<CR>
    nnoremap zO :call VSCodeNotify('editor.unfoldRecursively')<CR>
    nnoremap za :call VSCodeNotify('editor.toggleFold')<CR>
    function! MoveCursor(direction) abort
        if(reg_recording() == '' && reg_executing() == '')
            return 'g'.a:direction
        else
            return a:direction
        endif
    endfunction
    nmap <expr> j MoveCursor('j')
    nmap <expr> k MoveCursor('k')

" Get navigating marks working with vscode neovim plugin
    " (also relies on VSCode Bookmarks plugin)
    nnoremap m v<Esc>:call VSCodeNotifyVisual('bookmarks.toggleLabeled', 0)<CR><Esc>

" Fix VSCode commands
    command! Tabnew call VSCodeNotify("workbench.action.duplicateWorkspaceInNewWindow")
    command! -bang  Quit if <q-bang> ==# '!' | call VSCodeNotify('workbench.action.revertAndCloseActiveEditor') | else | call VSCodeNotify('workbench.action.joinTwoGroups') | call VSCodeNotify('workbench.action.navigateBack') | endif
    command! -bang  Bd if <q-bang> ==# '!' | call VSCodeNotify('workbench.action.revertAndCloseActiveEditor') | else | call VSCodeNotify('workbench.action.closeActiveEditor') | endif
    AlterCommand bd Bd

" Fix the 'vscode neovim' plugin's <C-W> mappings
    nnoremap <C-W>>     :call VSCodeNotify("workbench.action.increaseViewWidth")<CR>
    nnoremap <C-W><     :call VSCodeNotify("workbench.action.decreaseViewWidth")<CR>
    nnoremap <C-W>+     :call VSCodeNotify("workbench.action.increaseViewHeight")<CR>
    nnoremap <C-W>-     :call VSCodeNotify("workbench.action.decreaseViewHeight")<CR>
    map      <C-W><C-H> <C-W>h
    map      <C-W><C-J> <C-W>j
    map      <C-W><C-K> <C-W>k
    map      <C-W><C-L> <C-W>l
    
" Add commenting to vscode neovim plugin
    xmap gc  <Plug>VSCodeCommentary
    nmap gc  <Plug>VSCodeCommentary
    omap gc  <Plug>VSCodeCommentary
    nmap gcc <Plug>VSCodeCommentaryLine

" ==================================== ADD FUNCTIONALITY ====================================
function! DisplayErrors() abort
    call VSCodeNotify("workbench.actions.view.problems")
endfunction

function! AutoFormat() abort
    call VSCodeNotify('editor.action.formatDocument')
endfunction

function! ChangeSymbolName() abort
    call VSCodeNotify('editor.action.rename')
endfunction

function! DelMarks() abort
    call VSCodeNotify("bookmarks.clearFromAllFiles")
endfunction

function! Only() abort
    call VSCodeNotify("workbench.action.closeSidebar")
    call VSCodeNotify("workbench.action.closePanel")
    call VSCodeNotify("workbench.action.joinAllGroups")
endfunction

function! AccessMarks() abort
    call VSCodeNotify('bookmarks.listFromAllFiles')
endfunction

function! StartTerminal() abort
    call VSCodeNotify('workbench.action.createTerminalEditor')
endfunction

function! Implementations() abort
    call VSCodeNotify('editor.action.goToImplementation')
endfunction

function! References() abort
    call VSCodeNotify('editor.action.goToReferences')
endfunction

function! Definition() abort
    call VSCodeNotify('editor.action.revealDefinition')
endfunction

function! Error() abort
    call Hover()
endfunction

function! Hover() abort
    call VSCodeNotify('editor.action.showDefinitionPreviewHover')
endfunction

function! AllAction() abort
    if (mode() == 'n')
        call VSCodeNotify("workbench.action.showCommands")
    else
        call VSCodeNotifyVisual("workbench.action.showCommands", 0)
    endif
endfunction

function! QuickAction() abort
    if (mode() == 'n')
        call VSCodeNotify("editor.action.quickFix")
    else
        call VSCodeNotifyVisual("editor.action.quickFix", 0)
    endif
endfunction

function! DirectoryBrowser() abort
    call VSCodeNotify('workbench.action.joinTwoGroups')
    call VSCodeNotify("workbench.files.action.showActiveFileInExplorer")
endfunction

function! ClearScreen() abort
    set nohlsearch
    call VSCodeNotify("workbench.action.closeSidebar")
    call VSCodeNotify("workbench.action.closePanel")
    call VSCodeNotify("notifications.hideToasts")
    call VSCodeNotify("notifications.hideList")
    call VSCodeNotify("closeFindWidget")
    call VSCodeNotify("closeParameterHints")
endfunction

function! OpenFile() abort
    call VSCodeNotify("workbench.action.quickOpen")
endfunction

function! ListBuffers() abort
    call VSCodeNotify("workbench.action.showEditorsInActiveGroup")
endfunction

function! ListWindows() abort
    call VSCodeNotify("workbench.action.showAllEditors")
endfunction

function! ExpandSelection() abort
    call VSCodeNotifyVisual("editor.action.smartSelect.expand", 1)
endfunction

function! ShrinkSelection() abort
    call VSCodeNotifyVisual("editor.action.smartSelect.shrink", 1)
endfunction